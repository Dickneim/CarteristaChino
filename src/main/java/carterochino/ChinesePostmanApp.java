/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package carterochino;
import graphTDA.*;
import panelgrafico.*;
import java.awt.*;
import java.awt.event.*;
import java.io.PrintStream;
import java.util.HashMap;
import java.util.Map;
import javax.swing.*;
import utils.*;
import java.util.Set;
import java.util.HashSet;


/**
 *
 * @author Jorge
 */
public class ChinesePostmanApp extends javax.swing.JPanel {
    private Grafo grafo;
    private Map<Integer, Point> posicionesVertices;
    private PanelGrafico panelGrafico;
    private PanelGraficoFondo panelGraficoFondo;
    private JPanel panelContenedor;
    private int idVertice = 1;
    private Vertice verticeSeleccionado = null;
    private boolean modoConectar = false;
    
    public ChinesePostmanApp(Grafo grafo) {
        initComponents();  
        this.grafo = (grafo != null) ? grafo : new Grafo();
        this.posicionesVertices = new HashMap<>();
        initGUI();
    }
    
    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnTeoria = new javax.swing.JButton();
        btnAplicacion = new javax.swing.JButton();
        btnConectar = new javax.swing.JButton();
        btnResolver = new javax.swing.JButton();
        btnLimpiar = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtPasos = new javax.swing.JTextArea();

        setPreferredSize(new java.awt.Dimension(800, 600));
        addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                formMouseMoved(evt);
            }
        });

        btnTeoria.setText("Modo Teoría");
        btnTeoria.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTeoriaActionPerformed(evt);
            }
        });

        btnAplicacion.setText("Modo Aplicación");

        btnConectar.setText("Conectar Vértices");

        btnResolver.setText("Resolver Cartero Chino");
        btnResolver.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnResolverActionPerformed(evt);
            }
        });

        btnLimpiar.setText("Limpiar");

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setToolTipText("");

        txtPasos.setColumns(20);
        txtPasos.setRows(5);
        jScrollPane1.setViewportView(txtPasos);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 437, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(104, 104, 104)
                .addComponent(btnTeoria, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnAplicacion)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnConectar)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnResolver)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnLimpiar)
                .addContainerGap(84, Short.MAX_VALUE))
            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(34, 34, 34)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnTeoria)
                    .addComponent(btnAplicacion)
                    .addComponent(btnConectar)
                    .addComponent(btnResolver)
                    .addComponent(btnLimpiar))
                .addGap(18, 18, 18)
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents
    
    private void initGUI() {
        setLayout(new BorderLayout());

        // Panel gráfico (teoría)
        panelGrafico = new PanelGrafico(grafo, posicionesVertices);
        panelGrafico.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                if (SwingUtilities.isLeftMouseButton(e) && !modoConectar) {
                    agregarVertice(e.getX(), e.getY());
                }
            }
        });

        // Panel gráfico con fondo (aplicación)
        panelGraficoFondo = new PanelGraficoFondo(grafo, posicionesVertices, "src/test/java/Fondo1.png");

        // Panel contenedor para alternar vistas
        panelContenedor = new JPanel(new CardLayout());
        panelContenedor.add(panelGrafico, "TEORIA");
        panelContenedor.add(panelGraficoFondo, "APLICACION");

        // Botones para alternar vistas
        JButton btnTeoria = new JButton("Modo Teoría");
        btnTeoria.addActionListener(e -> ((CardLayout) panelContenedor.getLayout()).show(panelContenedor, "TEORIA"));

        JButton btnAplicacion = new JButton("Modo Aplicación");
        btnAplicacion.addActionListener(e -> ((CardLayout) panelContenedor.getLayout()).show(panelContenedor, "APLICACION"));

        JButton btnConectar = new JButton("Conectar Vértices");
        btnConectar.addActionListener(e -> modoConectar = !modoConectar);
        
        JButton btnResolver = new JButton("Resolver Cartero Chino");
        btnResolver.addActionListener(e -> resolverProblemaCartero());  // Acción al hacer clic
        
        JButton btnLimpiar = new JButton("Limpiar");
        btnLimpiar.addActionListener(e -> limpiar());
        
        // Panel de controles
        JPanel panelControles = new JPanel();
        panelControles.add(btnTeoria);
        panelControles.add(btnAplicacion);
        panelControles.add(btnConectar);
        panelControles.add(btnResolver);
        panelControles.add(btnLimpiar);
        add(panelControles, BorderLayout.NORTH);
        add(panelContenedor, BorderLayout.CENTER);

        // Eventos para conectar vértices
        panelGrafico.addMouseListener(new MouseAdapter() {
            @Override
            public void mousePressed(MouseEvent e) {
                if (modoConectar && SwingUtilities.isLeftMouseButton(e)) {
                    Vertice vertice = buscarVerticeCercano(e.getX(), e.getY());
                    if (vertice != null) {
                        if (verticeSeleccionado == null) {
                            verticeSeleccionado = vertice;
                        } else {
                            String pesoStr = JOptionPane.showInputDialog("Ingrese el peso de la arista:");
                            try {
                                int peso = Integer.parseInt(pesoStr);
                                grafo.agregarAristaNoDirigida(verticeSeleccionado.getId(), vertice.getId(), peso);
                                panelGrafico.repaint();
                                panelGraficoFondo.repaint();
                            } catch (NumberFormatException ex) {
                                JOptionPane.showMessageDialog(null, "Peso inválido.");
                            }
                            verticeSeleccionado = null;
                        }
                    }
                }
            }
        });
    }

    private void agregarVertice(int x, int y) {
        if (buscarVerticeCercano(x, y) != null) return;  // Evita duplicados
        grafo.agregarVertice(idVertice);
        posicionesVertices.put(idVertice, new Point(x, y));
        idVertice++;
        panelGrafico.repaint();
        panelGraficoFondo.repaint();
    }

    private Vertice buscarVerticeCercano(int x, int y) {
        for (Map.Entry<Integer, Point> entry : posicionesVertices.entrySet()) {
            Point p = entry.getValue();
            if (Math.abs(p.x - x) <= 15 && Math.abs(p.y - y) <= 15) {
                return grafo.getVertice(entry.getKey());
            }
        }
        return null;
    }
    
    private void resolverProblemaCartero() {
        try {
            txtPasos.setText(""); // Limpiar el área de texto

            // Redirigir salida estándar a txtPasos
            PrintStream printStream = new PrintStream(new JTextAreaOutputStream(txtPasos));
            System.setOut(printStream);

            if (grafo == null || grafo.getAristas().isEmpty() || !grafo.esConexo()) {
                String msg = (grafo == null || grafo.getAristas().isEmpty()) ? 
                    "¡Grafo vacío!" : "Grafo no conexo";
                System.out.println("Error: " + msg);
                JOptionPane.showMessageDialog(this, msg, "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }

            System.out.println("Iniciando algoritmo del Cartero Chino...");

            Grafo grafoCopia = grafo.clonar();
            System.out.println("Clonando el grafo original.");

            ChinesePostman solver = new ChinesePostman();
            solver.setTextArea(txtPasos);  // opcional, ya que ahora usamos System.out
            solver.ChinesePostmanTour(grafoCopia);

            int sumaPesos = 0;
            Set<String> aristasVisitadas = new HashSet<>();
            for (Arista a : grafoCopia.getAristas()) {
                String clave1 = a.getOrigen() + "-" + a.getDestino();
                String clave2 = a.getDestino() + "-" + a.getOrigen();
                if (!aristasVisitadas.contains(clave1) && !aristasVisitadas.contains(clave2)) {
                    sumaPesos += a.getPeso();
                    aristasVisitadas.add(clave1);
                    aristasVisitadas.add(clave2);
                }
            }

            System.out.println("Recorrido completado. Peso total: " + sumaPesos);

            JOptionPane.showMessageDialog(this,
                "Longitud total del recorrido mínimo: " + sumaPesos,
                "Resultado del Cartero Chino",
                JOptionPane.INFORMATION_MESSAGE
            );

            // Colorear aristas duplicadas
            Map<Arista, Color> coloresAristas = new HashMap<>();
            for (Arista a : grafoCopia.getAristas()) {
                boolean esDuplicada = !grafo.getAristas().contains(a);
                coloresAristas.put(a, esDuplicada ? Color.RED : Color.GREEN);
            }

            panelGrafico.setAristasDestacadas(grafoCopia.getAristas(), coloresAristas);
            panelGrafico.repaint();

        } catch (Exception ex) {
            System.out.println("Error durante la ejecución: " + ex.getMessage());
            JOptionPane.showMessageDialog(this, "Error: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void limpiar() {
        int confirmacion = JOptionPane.showConfirmDialog(
            this, 
            "¿Está seguro que desea limpiar el grafo actual?\nSe perderán todos los vértices y aristas.",
            "Confirmar limpieza",
            JOptionPane.YES_NO_OPTION,
            JOptionPane.WARNING_MESSAGE
        );

        if (confirmacion == JOptionPane.YES_OPTION) {
            // Reiniciar el grafo
            this.grafo = new Grafo();

            // Reiniciar las posiciones de los vértices
            this.posicionesVertices.clear();

            // Reiniciar el contador de vértices
            this.idVertice = 1;

            // Resetear estado de conexión
            this.verticeSeleccionado = null;
            this.modoConectar = false;

            // Limpiar las aristas destacadas
            this.panelGrafico.setAristasDestacadas(null,null);
            this.panelGraficoFondo.setAristasDestacadas(null,null);

            // Actualizar los paneles gráficos
            this.panelGrafico.repaint();
            this.panelGraficoFondo.repaint();
            
            this.panelGrafico.setGrafo(this.grafo);
            this.panelGraficoFondo.setGrafo(this.grafo);

            JOptionPane.showMessageDialog(this, "Grafo limpiado correctamente.", "Información", JOptionPane.INFORMATION_MESSAGE);
        }
    }
    
    private void formMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseMoved
        // TODO add your handling code here:
    }//GEN-LAST:event_formMouseMoved

    private void btnTeoriaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTeoriaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btnTeoriaActionPerformed

    private void btnResolverActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnResolverActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btnResolverActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAplicacion;
    private javax.swing.JButton btnConectar;
    private javax.swing.JButton btnLimpiar;
    private javax.swing.JButton btnResolver;
    private javax.swing.JButton btnTeoria;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea txtPasos;
    // End of variables declaration//GEN-END:variables
    
    public static void main(String[] args) {
        Grafo grafoVacio = new Grafo();
        lanzarGUI(grafoVacio);
    }
    
    private static void lanzarGUI(Grafo grafo) {
        JFrame frame = new JFrame("Problema del Cartero Chino");
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.add(new ChinesePostmanApp(grafo));
        frame.setSize(800, 600);
        frame.setLocationRelativeTo(null);
        frame.setVisible(true);
    }
}
